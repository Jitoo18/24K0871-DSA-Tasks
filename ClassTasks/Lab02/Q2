#include <iostream>
using namespace std;

class Matrix
{
public:
    int rows;
    int cols;
    int **arr;

    Matrix(int rows, int cols) : rows(rows), cols(cols)
    {
        arr = new int *[rows];
        for (int i = 0; i < rows; ++i)
        {
            arr[i] = new int[cols](); 
        }
    }

    void reSize(int newRows, int newCols)
    {
        if (newRows == rows && newCols == cols)
            return;

        int **newArr = new int *[newRows];
        for (int i = 0; i < newRows; ++i)
        {
            newArr[i] = new int[newCols](); 
        }

        int minRows = (rows < newRows) ? rows : newRows;
        int minCols = (cols < newCols) ? cols : newCols;
        for (int i = 0; i < minRows; ++i)
        {
            for (int j = 0; j < minCols; ++j)
            {
                newArr[i][j] = arr[i][j];
            }
        }

        for (int i = 0; i < rows; ++i)
        {
            delete[] arr[i];
        }
        delete[] arr;

        arr = newArr;
        rows = newRows;
        cols = newCols;
    }

    void transpose()
    {
        int newRows = cols;
        int newCols = rows;
        int **newArr = new int *[newRows];
        for (int i = 0; i < newRows; ++i)
        {
            newArr[i] = new int[newCols]();
        }

        for (int i = 0; i < rows; ++i)
        {
            for (int j = 0; j < cols; ++j)
            {
                newArr[j][i] = arr[i][j];
            }
        }

        for (int i = 0; i < rows; ++i)
        {
            delete[] arr[i];
        }
        delete[] arr;

        arr = newArr;
        rows = newRows;
        cols = newCols;
    }

    void add2ToOddColumns()
    {
        for (int i = 0; i < rows; ++i)
        {
            for (int j = 0; j < cols; ++j)
            {
                if (j % 2 != 0)
                {
                    arr[i][j] += 2;
                }
            }
        }
    }

    void print() const
    {
        for (int i = 0; i < rows; ++i)
        {
            for (int j = 0; j < cols; ++j)
            {
                cout << arr[i][j] << " ";
            }
            cout << endl;
        }
    }

    ~Matrix()
    {
        for (int i = 0; i < rows; ++i)
        {
            delete[] arr[i];
        }
        delete[] arr;
    }
};

int main()
{
    int rows, cols;
    cout << "Enter the Rows and Columns: ";
    cin >> rows >> cols;

    Matrix m(rows, cols);

    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            cin >> m.arr[i][j];
        }
    }

    cout << "Original Matrix:" << endl;
    m.print();

    m.add2ToOddColumns();
    cout << "Matrix After adding 2 at odd columns:" << endl;
    m.print();

    m.transpose();
    cout << "Transposed Matrix:" << endl;
    m.print();

    return 0;
}
