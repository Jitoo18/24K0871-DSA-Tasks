#include <iostream>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList
{
private:
    Node *head;

public:
    LinkedList() : head(nullptr) {}

    void insert(int value)
    {
        Node *newNode = new Node(value);
        if (!head)
        {
            head = newNode;
        }
        else
        {
            Node *temp = head;
            while (temp->next)
            {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void display()
    {
        Node *temp = head;
        while (temp)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void sort()
    {
        if (!head || !head->next)
            return;

        Node *current = head;
        while (current)
        {
            Node *minNode = current;
            Node *temp = current->next;
            while (temp)
            {
                if (temp->data < minNode->data)
                {
                    minNode = temp;
                }
                temp = temp->next;
            }
            int tempData = current->data;
            current->data = minNode->data;
            minNode->data = tempData;
            current = current->next;
        }
    }

    void concatenate(LinkedList &other)
    {
        if (!head)
        {
            head = other.head;
        }
        else
        {
            Node *temp = head;
            while (temp->next)
            {
                temp = temp->next;
            }
            temp->next = other.head;
        }
        other.head = nullptr;
    }

    int findMiddle()
    {
        if (!head)
            return -1;

        Node *slow = head;
        Node *fast = head;

        while (fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow->data;
    }

    void removeDuplicates()
    {
        if (!head)
            return;

        Node *current = head;
        while (current && current->next)
        {
            if (current->data == current->next->data)
            {
                Node *temp = current->next;
                current->next = current->next->next;
                delete temp;
            }
            else
            {
                current = current->next;
            }
        }
    }

    static LinkedList mergeSorted(LinkedList &list1, LinkedList &list2)
    {
        LinkedList merged;
        Node *p1 = list1.head;
        Node *p2 = list2.head;
        Node *tail = nullptr;

        if (!p1)
        {
            merged.head = p2;
            return merged;
        }
        if (!p2)
        {
            merged.head = p1;
            return merged;
        }

        if (p1->data <= p2->data)
        {
            merged.head = p1;
            tail = p1;
            p1 = p1->next;
        }
        else
        {
            merged.head = p2;
            tail = p2;
            p2 = p2->next;
        }

        while (p1 && p2)
        {
            if (p1->data <= p2->data)
            {
                tail->next = p1;
                tail = p1;
                p1 = p1->next;
            }
            else
            {
                tail->next = p2;
                tail = p2;
                p2 = p2->next;
            }
        }

        if (p1)
        {
            tail->next = p1;
        }
        else
        {
            tail->next = p2;
        }

        list1.head = nullptr;
        list2.head = nullptr;
        return merged;
    }
};

int main()
{
    LinkedList list1;
    list1.insert(5);
    list1.insert(3);
    list1.insert(8);
    list1.insert(1);

    cout << "Original list: " << endl;
    list1.display();

    list1.sort();
    cout << "Sorted list: " << endl;
    list1.display();

    LinkedList list2;
    list2.insert(2);
    list2.insert(4);
    list2.insert(6);

    list1.concatenate(list2);
    cout << "After concatenation: " << endl;
    list1.display();

    cout << "Middle element: " << list1.findMiddle() << endl;

    list1.insert(6);
    list1.insert(6);
    list1.insert(8);
    list1.sort();
    cout << "List with duplicates: " << endl;
    list1.display();
    list1.removeDuplicates();
    cout << "After removing duplicates: " << endl;
    list1.display();

    LinkedList list3;
    list3.insert(1);
    list3.insert(5);
    list3.insert(9);

    LinkedList list4;
    list4.insert(2);
    list4.insert(4);
    list4.insert(7);

    LinkedList merged = LinkedList::mergeSorted(list3, list4);
    cout << "Merged sorted list: " << endl;
    merged.display();

    return 0;
}
