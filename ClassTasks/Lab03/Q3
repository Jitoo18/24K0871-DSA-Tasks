#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *prev;
    Node *next;

    Node(int value)
    {
        data = value;
        prev = NULL;
        next = NULL;
    }
};

class DoublyList
{
private:
    Node *head;
    Node *tail;

public:
    DoublyList()
    {
        head = NULL;
        tail = NULL;
    }

    void insertAtEnd(int value)
    {
        Node *newNode = new Node(value);
        if (head == NULL)
        {
            head = newNode;
            tail = newNode;
            cout << "Added compartment #" << value << " to the train." << endl;
        }
        else
        {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
            cout << "Added compartment #" << value << " to the end of the train." << endl;
        }
    }

    void deleteAtFront()
    {
        if (head == NULL)
        {
            cout << "List is empty. No compartment to remove." << endl;
            return;
        }

        Node *temp = head;
        int removedValue = temp->data;

        if (head == tail)
        {
            head = NULL;
            tail = NULL;
        }
        else
        {
            head = head->next;
            head->prev = NULL;
        }

        delete temp;
        cout << "\nRemoved compartment #" << removedValue << " from the front." << endl;
    }

    void search(int value)
    {
        Node *current = head;
        int position = 1;
        bool found = false;

        while (current != NULL)
        {
            if (current->data == value)
            {
                cout << "\nCompartment #" << value << " found at position " << position << "." << endl;
                found = true;
                break;
            }
            current = current->next;
            position++;
        }

        if (!found)
        {
            cout << "\nCompartment #" << value << " not found in the train." << endl;
        }
    }

    void display()
    {
        if (head == NULL)
        {
            cout << "\nThe train has no compartments." << endl;
            return;
        }

        cout << "\nTrain compartments: ";
        Node *current = head;
        while (current != NULL)
        {
            cout << current->data;
            if (current->next != NULL)
            {
                cout << " <-> ";
            }
            current = current->next;
        }
        cout << endl;
    }
};

int main()
{
    DoublyList train;

    train.insertAtEnd(101);
    train.insertAtEnd(102);
    train.insertAtEnd(103);

    cout << "\nInitial train: " << endl;
    train.display();

    train.deleteAtFront();
    cout << "After removing front compartment: " << endl;
    train.display();

    train.search(102);
    train.search(104);

    train.insertAtEnd(104);
    train.insertAtEnd(105);

    cout << "Final train: " << endl;
    train.display();

    return 0;
}
