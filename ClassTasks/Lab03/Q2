#include <iostream>
#include <string>
using namespace std;

struct Node
{
    string title;
    Node *next;
};

class LinkedList
{
private:
    Node *head;
    Node *tail;
    int size;

public:
    LinkedList()
    {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }

    void addToTail(string title)
    {
        Node *newNode = new Node;
        newNode->title = title;
        newNode->next = nullptr;
        if (head == nullptr)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            tail->next = newNode;
            tail = newNode;
        }
        size++;
    }

    void deleteFromFront()
    {
        if (head == nullptr)
        {
            cout << "Catalog is empty. No book to delete." << endl;
            return;
        }
        Node *temp = head;
        head = head->next;
        if (head == nullptr)
        {
            tail = nullptr;
        }
        delete temp;
        size--;
    }

    void searchByTitle(string title)
    {
        Node *current = head;
        int position = 1;
        bool found = false;
        while (current != nullptr)
        {
            if (current->title == title)
            {
                cout << "Book found at position " << position << ": " << title << endl;
                found = true;
                break;
            }
            current = current->next;
            position++;
        }
        if (!found)
        {
            cout << "Book with title '" << title << "' not found in the catalog." << endl;
        }
    }

    void searchByPosition(int position)
    {
        if (position < 1 || position > size)
        {
            cout << "Invalid position. Please enter a position between 1 and " << size << "." << endl;
            return;
        }
        Node *current = head;
        for (int i = 1; i < position; i++)
        {
            current = current->next;
        }
        cout << "Book at position " << position << ": " << current->title << endl;
    }

    void display()
    {
        if (head == nullptr)
        {
            cout << "Catalog is empty." << endl;
            return;
        }
        Node *current = head;
        while (current != nullptr)
        {
            cout << current->title;
            if (current->next != nullptr)
            {
                cout << " -> ";
            }
            current = current->next;
        }
        cout << endl;
    }

    ~LinkedList()
    {
        while (head != nullptr)
        {
            deleteFromFront();
        }
    }
};

int main()
{
    LinkedList catalog;
    catalog.addToTail("Data Structures And Algorithms");
    catalog.addToTail("Operating Systems");
    catalog.addToTail("Computer Networks");
    catalog.addToTail("Database Management Systems");

    cout << "Initial Catalog:" << endl << endl;
    catalog.display();

    catalog.addToTail("Artificial Intelligence");
    cout << "After adding 'Artificial Intelligence' to tail:" << endl << endl;
    catalog.display();

    catalog.deleteFromFront();
    cout << "After deleting book from front:" << endl << endl;
    catalog.display();

    cout << "Searching for 'Computer Networks' by title:" << endl << endl;
    catalog.searchByTitle("Computer Networks");

    cout << "Searching for book at position 2:" << endl << endl;
    catalog.searchByPosition(2);

    return 0;
}
